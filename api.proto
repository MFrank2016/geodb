syntax = "proto3";

package api;

option go_package = "api";
import "github.com/mwitkow/go-proto-validators/validator.proto";

service GeoDB {
    rpc Ping(PingRequest) returns(PingResponse){};
    rpc Set(SetRequest) returns(SetResponse){};
    rpc Get(GetRequest) returns(GetResponse){};
    rpc GetRegex(GetRegexRequest) returns(GetRegexResponse){};
    rpc Seek(SeekRequest) returns(SeekResponse){};
    rpc SeekKeys(SeekKeysRequest) returns(SeekKeysResponse){};
    rpc GetKeys(GetKeysRequest) returns(GetKeysResponse){};
    rpc GetRegexKeys(GetRegexKeysRequest) returns(GetRegexKeysResponse){};
    rpc Delete(DeleteRequest) returns(DeleteResponse){};
    rpc Stream(StreamRequest) returns(stream StreamResponse){};
    rpc StreamRegex(StreamRegexRequest) returns(stream StreamRegexResponse){};
}

message StreamRequest {
    string client_id =1;
    repeated string keys =2;
}

message StreamResponse {
    ObjectDetail object =1;
}

message StreamRegexRequest {
    string client_id =1;
    string regex =2;
}

message StreamRegexResponse {
    ObjectDetail object =1;
}

message SetRequest {
    map<string, Object> object =1;
}

message SetResponse {
    map<string, ObjectDetail> object= 1;
}

message GetKeysRequest {}

message GetKeysResponse {
    repeated string keys =1;
}

message SeekKeysRequest {
    string prefix =1;
}

message SeekKeysResponse {
    repeated string keys =1;
}


message GetRegexKeysRequest {
    string regex =1;
}

message GetRegexKeysResponse {
    repeated string keys =1;
}

message GetRequest {
    repeated string keys =1;
}

message GetResponse {
    map<string, ObjectDetail> object= 1;
}

message GetRegexRequest {
    string regex =1;
}

message GetRegexResponse {
    map<string, ObjectDetail> object= 1;
}

message SeekRequest {
    string prefix =1;
}

message SeekResponse {
    map<string, ObjectDetail> object= 1;
}

message DeleteRequest {
    repeated string keys =1;
}

message DeleteResponse {}

message PingRequest {}

message PingResponse {
    bool ok =1;
}

message Point {
    double lat =1;
    double lon =2;
}

message Object {
    string key =1;
    Point point =2;
    int64 radius =3;
    TravelMode travel_mode =4;
    map<string, string> metadata =5;
    int64 expires_unix =6;
    repeated string trackers =7;
    int64 updated_unix =8;
}

message Directions  {
    string html_directions =1;
    int64 eta =2;
    int64 travel_dist =3;
}

message Address {
    string state =1;
    string address =2;
    string country =3;
    string zip =4;
    string county =5;
    string city =6;
}

message Event {
    Object object =1;
    double distance =2;
    bool inside =3;
    Directions direction =4;
    int64 timestamp_unix =5;
}

message Events {
    Object trigger_object =1;
    repeated Event events =2;
}

message ObjectDetail {
    Object object =1;
    Address address = 2;
    repeated Event events =3;
}

enum TravelMode {
    Driving = 0;
    Walking =1;
    Bicycling =2;
    Transit =3;
}